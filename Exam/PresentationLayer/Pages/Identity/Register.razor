@page "/register"
@using BusinessLayer;
@using ServiceLayer;
@using PresentationLayer.Services;
@using PresentationLayer.Pages;
@inject ErrorModel errorModel;
@inject ILogger<User> logger;
@inject IdentityManager identityManager;
@inject NavigationManager navigationManager;




        <h3>Register</h3>
        <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>Username</label> <input type="text" minlength="10" maxlength="10" @bind-value="user.UserName" required />
            <br /><br />
            <label>Password</label> <input type="text" @bind-value="password" required />
            <br /><br />
            <label>Email</label> <input type="text" @bind-value="user.Email" required />
            <br /><br />
            <label>Name</label> <input type="text" @bind-value="user.Name" required />
            <br /><br />
            <label>Age</label> <input type="text" @bind-value="user.Age" required />
            <br /><br />
            <label>Role</label> <input type="text" @bind-value="role" required />


            <br /><br />
            <button type="submit">Register</button>
        </EditForm>
        <p>@error</p>
   


@code{
    string error;

    User user = new User();
    string password = string.Empty;
    Role role = new Role();

    private async Task HandleValidSubmit()
    {
        try
        {
            await identityManager.CreateUserAsync(user.UserName, password, user.Email, user.Name, user.Age, role);
            navigationManager.NavigateTo("/", true); // Rerender the navigation menu!
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }



    }
}
